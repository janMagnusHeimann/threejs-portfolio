/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 developer.glb -T 
Files: developer.glb [981.62KB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/developer-transformed.glb [395.08KB] (60%)
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';

const Developer = ({ animationName = 'idle', ...props }) => {
  const group = useRef();

  const { scene } = useGLTF('/models/animations/jan.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);

  // Debug: Log available nodes
  React.useEffect(() => {
    console.log('Available nodes in jan.glb:', Object.keys(nodes));
    console.log('Available materials in jan.glb:', Object.keys(materials));
  }, [nodes, materials]);

  const { animations: idleAnimation } = useFBX('/models/animations/idle.fbx');
  const { animations: saluteAnimation } = useFBX('/models/animations/salute.fbx');
  const { animations: clappingAnimation } = useFBX('/models/animations/clapping.fbx');
  const { animations: victoryAnimation } = useFBX('/models/animations/victory.fbx');

  idleAnimation[0].name = 'idle';
  saluteAnimation[0].name = 'salute';
  clappingAnimation[0].name = 'clapping';
  victoryAnimation[0].name = 'victory';

  const { actions } = useAnimations(
    [idleAnimation[0], saluteAnimation[0], clappingAnimation[0], victoryAnimation[0]],
    group,
  );

  // Debug: Log available nodes and materials
  useEffect(() => {
    console.log('=== JAN.GLB MODEL STRUCTURE ===');
    console.log('Available nodes:', Object.keys(nodes));
    console.log('Available materials:', Object.keys(materials));
    
    // Log each node with its properties
    Object.entries(nodes).forEach(([name, node]) => {
      console.log(`Node: ${name}`, {
        type: node.type,
        hasGeometry: !!node.geometry,
        hasMaterial: !!node.material,
        hasChildren: node.children?.length > 0,
        childrenCount: node.children?.length || 0
      });
    });
  }, [nodes, materials]);

  useEffect(() => {
    actions[animationName].reset().fadeIn(0.5).play();
    return () => actions[animationName].fadeOut(0.5);
  }, [animationName]);

  // Helper function to safely render a mesh if it exists
  const renderMesh = (nodeName, materialName, meshName) => {
    const node = nodes[nodeName];
    const material = materials[materialName];
    
    if (!node || !material) {
      console.warn(`Missing node "${nodeName}" or material "${materialName}"`);
      return null;
    }

    return (
      <skinnedMesh
        key={nodeName}
        name={meshName || nodeName}
        geometry={node.geometry}
        material={material}
        skeleton={node.skeleton}
        morphTargetDictionary={node.morphTargetDictionary}
        morphTargetInfluences={node.morphTargetInfluences}
      />
    );
  };

  return (
    <group ref={group} {...props} dispose={null}>
      {/* Try to find the root bone - common names are Hips, Root, Armature */}
      {nodes.Hips && <primitive object={nodes.Hips} />}
      {!nodes.Hips && nodes.Root && <primitive object={nodes.Root} />}
      {!nodes.Hips && !nodes.Root && nodes.Armature && <primitive object={nodes.Armature} />}
      
      {/* Render available meshes with null safety */}
      {renderMesh('Wolf3D_Hair', 'Wolf3D_Hair', 'Hair')}
      {renderMesh('Wolf3D_Glasses', 'Wolf3D_Glasses', 'Glasses')}
      {renderMesh('Wolf3D_Body', 'Wolf3D_Body', 'Body')}
      {renderMesh('Wolf3D_Outfit_Bottom', 'Wolf3D_Outfit_Bottom', 'OutfitBottom')}
      {renderMesh('Wolf3D_Outfit_Footwear', 'Wolf3D_Outfit_Footwear', 'Footwear')}
      {renderMesh('Wolf3D_Outfit_Top', 'Wolf3D_Outfit_Top', 'OutfitTop')}
      {renderMesh('EyeLeft', 'Wolf3D_Eye', 'EyeLeft')}
      {renderMesh('EyeRight', 'Wolf3D_Eye', 'EyeRight')}
      {renderMesh('Wolf3D_Head', 'Wolf3D_Skin', 'Head')}
      {renderMesh('Wolf3D_Teeth', 'Wolf3D_Teeth', 'Teeth')}
      
      {/* If no known meshes exist, try to render all available meshes */}
      {Object.keys(nodes).length > 0 && !nodes.Wolf3D_Hair && !nodes.Wolf3D_Body && 
        Object.keys(nodes).map(nodeName => {
          const node = nodes[nodeName];
          if (node && node.geometry && node.material) {
            return (
              <mesh key={nodeName} geometry={node.geometry} material={node.material} />
            );
          }
          return null;
        })
      }
    </group>
  );
};

useGLTF.preload('/models/animations/jan.glb');

export default Developer;
